/**
 *  Handle the new coming in quest (from the producer)
 *  and giving out the quest (to the consumer).
 *  Also handle the quest release and quest acquire, that the Knight will use.
 *
 * @Author: Chengeng Liu
 * @StudentID: 813174
 */
public class Agenda {

    private Quest quest;
    private String tag = null;

    public Agenda(String tag){
        this.tag = tag;
        this.quest = null;
    }

    /**
     *  Interact with the producer. It waits until current quest is null(has been removed by the consumer)
     * @param quest The new coming quest generated by the producer.
     * @throws InterruptedException
     */
    synchronized void addNew(Quest quest) throws InterruptedException{
        // Wait until there is one quest coming in, from the producer.
        while(this.quest!=null){
            this.wait();
        }
        this.quest = quest;
        System.out.println(this.quest.toString() + this.toString());
        this.notifyAll();
    }

    /**
     *  Remove a completed quest. Interact with the consumer. Wait until the quest is not null
     * @throws InterruptedException
     */
    synchronized void removeComplete() throws InterruptedException{
        // If current agenda holds non, wait until it has one to be removed.
        while(this.quest==null){
            this.wait();
        }
        Quest questTemp = this.quest;
        this.quest = null;
        System.out.println(questTemp.toString()+ this.toString());
        this.notifyAll();
    }

    /**
     *  A completed quest is released by the Knight.
     * @param knight The Knight
     * @param quest The quest finised by the corresponding Knight
     * @throws InterruptedException
     */
    synchronized void questRelease(Knight knight, Quest quest) throws InterruptedException{
//        When the agenda is holding a quest, wait.
        while(this.quest!=null ){
            this.wait();
        }
//        Initially quest will be null. This is to prevent from null pointer exception.
        if(quest != null && quest.completed){
            this.quest = quest;
            System.out.println(knight.toString()+" releases "+quest.toString());
            this.notifyAll();
        }
    }

    /**
     *  A new quest is acquired by the Knight.
     * @param knight  The Knight who request for new quest
     * @return quest  The quest that assigned to the Knight
     * @throws InterruptedException
     */
    synchronized Quest questAcquire(Knight knight) throws InterruptedException {
        while(this.quest==null){
            this.wait();
        }
        Quest quest = this.quest;
        this.quest = null;
        System.out.println(knight.toString() + " acquires "+quest.toString());
        this.notifyAll();

        return quest;
    }

    @Override
    public String toString(){
        if(this.tag.equals("New Agenda")) return " added to "+this.tag;
        return " removed from "+this.tag;
    }







}
